import { Callbacks, Style } from "../global.slint";

component LineEditBase inherits Rectangle {
    in-out property <string> placeholder-text;
    in-out property <length> font-size <=> i-text-input.font-size;
    in property <string> font-family: "Menlo";
    in-out property <string> text <=> i-text-input.text;
    in-out property <brush> placeholder-color;
    in-out property <bool> enabled <=> i-text-input.enabled;
    in-out property <bool> has-focus: i-text-input.has-focus;
    in-out property <InputType> input-type <=> i-text-input.input-type;
    in-out property <TextHorizontalAlignment> horizontal-alignment <=> i-text-input.horizontal-alignment;
    in-out property <bool> read-only <=> i-text-input.read-only;
    in property <int> font-weight <=> i-text-input.font-weight;
    in property <brush> text-color;
    in property <color> selection-background-color <=> i-text-input.selection-background-color;
    in property <color> selection-foreground-color <=> i-text-input.selection-foreground-color;
    in property <length> margin;

    callback accepted( /* text */ string);
    callback edited(/* text */ string);

    public function set-selection-offsets(start: int, end: int) {
        i-text-input.set-selection-offsets(start, end);
    }

    public function select-all() {
        i-text-input.select-all();
    }

    public function clear-selection() {
        i-text-input.clear-selection();
    }

    public function cut() {
        i-text-input.cut();
    }

    public function copy() {
        i-text-input.copy();
    }

    public function paste() {
        i-text-input.paste();
    }

    min-height: i-text-input.preferred-height;
    min-width: max(50px, i-placeholder.min-width);
    clip: true;
    forward-focus: i-text-input;

    i-placeholder := Text {
        width: 100%;
        height: 100%;
        vertical-alignment: center;
        text: (root.text == "" && i-text-input.preedit-text == "") ? root.placeholder-text : "";
        font-size:  i-text-input.font-size;
        font-italic: i-text-input.font-italic;
        font-weight: i-text-input.font-weight;
        font-family:  root.font-family;
        color: root.placeholder-color;
        horizontal-alignment: root.horizontal-alignment;
    }

    i-text-input := TextInput {
        property <length> computed-x;

        x: min(0px, max(parent.width - self.width - self.text-cursor-width, self.computed-x));
        width: max(parent.width - self.text-cursor-width, self.preferred-width);
        height: 100%;
        vertical-alignment: center;
        single-line: true;
        color: root.text-color;
        font-family: root.font-family;

        cursor-position-changed(cpos) => {
            if (cpos.x + self.computed_x < root.margin) {
                self.computed_x = - cpos.x + root.margin;
            } else if (cpos.x + self.computed_x > parent.width - root.margin - self.text-cursor-width) {
                self.computed_x = parent.width - cpos.x - root.margin - self.text-cursor-width;
            }
        }

        accepted => { root.accepted(self.text); }

        edited => { root.edited(self.text); }
    }
}

component NativeLineEdit {
    out property <length> native-padding-left;
    out property <length> native-padding-right;
    out property <length> native-padding-top;
    out property <length> native-padding-bottom;
    in property <bool> has-focus;
    in property <bool> enabled: true;
    //-is_internal
}

export component LineEdit {
    in property <length> font-size <=> inner.font-size;
    in property <string> placeholder-text <=> inner.placeholder-text;
    in property input-type <=> inner.input-type;
    in property horizontal-alignment <=> inner.horizontal-alignment;
    in property read-only <=> inner.read-only;
    in property <bool> enabled: true;
    out property <bool> has-focus <=> inner.has-focus;
    in-out property <string> text <=> inner.text;

    callback accepted <=> inner.accepted;
    callback edited <=> inner.edited;

    public function set-selection-offsets(start: int, end: int) {
        inner.set-selection-offsets(start, end);
    }

    public function select-all() {
        inner.select-all();
    }

    public function clear-selection() {
        inner.clear-selection();
    }

    public function cut() {
        inner.cut();
    }

    public function copy() {
        inner.copy();
    }

    public function paste() {
        inner.paste();
    }

    forward-focus: inner;
    horizontal-stretch: 1;
    vertical-stretch: 0;
    min-width: max(160px, layout.min-height);
    min-height: max(32px, layout.min-height);

    native := NativeLineEdit {
        has-focus <=> root.has-focus;
        enabled: root.enabled;
        width: 100%;
        height: 100%;
    }

    layout := HorizontalLayout {
        padding-left: native.native-padding-left;
        padding-right: native.native-padding-right;
        padding-top: native.native-padding-top;
        padding-bottom: native.native-padding-bottom;

        inner := LineEditBase {
            placeholder-color: Style.color.secondary;
            text-color: Style.color.primary;
            enabled: root.enabled;
            margin: layout.padding-left + layout.padding-right;
        }
    }
}